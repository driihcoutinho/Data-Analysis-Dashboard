{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/adrie/Desktop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth.service\";\nexport class NavigationService {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n    this.registrationFlow = {\n      hasAcceptedTerms: false\n    };\n  }\n  navigateAfterLogin() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const user = yield _this.authService.getCurrentUser();\n        if (!user) {\n          _this.router.navigate(['/login']);\n          return;\n        }\n        // Se o usuário acabou de se registrar e não aceitou os termos\n        if (!_this.registrationFlow.hasAcceptedTerms) {\n          _this.router.navigate(['/terms']);\n          return;\n        }\n        // Caso contrário, vai para o feed\n        _this.router.navigate(['/feed']);\n      } catch (error) {\n        console.error('Navigation error:', error);\n        _this.router.navigate(['/login']);\n      }\n    })();\n  }\n  navigateAfterRegistration() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.registrationFlow.hasAcceptedTerms = false;\n      _this2.router.navigate(['/terms']);\n    })();\n  }\n  navigateAfterTermsAcceptance() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.registrationFlow.hasAcceptedTerms = true;\n      _this3.router.navigate(['/feed']);\n    })();\n  }\n  navigateAfterTermsRejection() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // Se rejeitar os termos, faz logout e volta para o registro\n      yield _this4.authService.logout();\n      _this4.router.navigate(['/register']);\n    })();\n  }\n  navigateToFeed() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.router.navigate(['/feed']);\n    })();\n  }\n  navigateToElo() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      _this6.router.navigate(['/elo']);\n    })();\n  }\n  navigateToLogin() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      _this7.router.navigate(['/login']);\n    })();\n  }\n  navigateToRegister() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      _this8.router.navigate(['/register']);\n    })();\n  }\n  resetRegistrationFlow() {\n    this.registrationFlow.hasAcceptedTerms = false;\n  }\n  isInRegistrationFlow() {\n    return !this.registrationFlow.hasAcceptedTerms;\n  }\n  static {\n    this.ɵfac = function NavigationService_Factory(t) {\n      return new (t || NavigationService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NavigationService,\n      factory: NavigationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;;;AAOA,OAAM,MAAOA,iBAAiB;EAK5BC,YACUC,MAAc,EACdC,WAAwB;IADxB,WAAM,GAAND,MAAM;IACN,gBAAW,GAAXC,WAAW;IANb,qBAAgB,GAAG;MACzBC,gBAAgB,EAAE;KACnB;EAKE;EAEGC,kBAAkB;IAAA;IAAA;MACtB,IAAI;QACF,MAAMC,IAAI,SAAS,KAAI,CAACH,WAAW,CAACI,cAAc,EAAE;QACpD,IAAI,CAACD,IAAI,EAAE;UACT,KAAI,CAACJ,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;UAChC;;QAGF;QACA,IAAI,CAAC,KAAI,CAACC,gBAAgB,CAACL,gBAAgB,EAAE;UAC3C,KAAI,CAACF,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;UAChC;;QAGF;QACA,KAAI,CAACN,MAAM,CAACM,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;OAChC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;QACzC,KAAI,CAACR,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;IACjC;EACH;EAEMI,yBAAyB;IAAA;IAAA;MAC7B,MAAI,CAACH,gBAAgB,CAACL,gBAAgB,GAAG,KAAK;MAC9C,MAAI,CAACF,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAAC;EACnC;EAEMK,4BAA4B;IAAA;IAAA;MAChC,MAAI,CAACJ,gBAAgB,CAACL,gBAAgB,GAAG,IAAI;MAC7C,MAAI,CAACF,MAAM,CAACM,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IAAC;EAClC;EAEMM,2BAA2B;IAAA;IAAA;MAC/B;MACA,MAAM,MAAI,CAACX,WAAW,CAACY,MAAM,EAAE;MAC/B,MAAI,CAACb,MAAM,CAACM,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;IAAC;EACtC;EAEMQ,cAAc;IAAA;IAAA;MAClB,MAAI,CAACd,MAAM,CAACM,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IAAC;EAClC;EAEMS,aAAa;IAAA;IAAA;MACjB,MAAI,CAACf,MAAM,CAACM,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;IAAC;EACjC;EAEMU,eAAe;IAAA;IAAA;MACnB,MAAI,CAAChB,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAAC;EACnC;EAEMW,kBAAkB;IAAA;IAAA;MACtB,MAAI,CAACjB,MAAM,CAACM,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;IAAC;EACtC;EAEAY,qBAAqB;IACnB,IAAI,CAACX,gBAAgB,CAACL,gBAAgB,GAAG,KAAK;EAChD;EAEAiB,oBAAoB;IAClB,OAAO,CAAC,IAAI,CAACZ,gBAAgB,CAACL,gBAAgB;EAChD;;;uBAtEWJ,iBAAiB;IAAA;EAAA;;;aAAjBA,iBAAiB;MAAAsB,SAAjBtB,iBAAiB;MAAAuB,YAFhB;IAAM;EAAA","names":["NavigationService","constructor","router","authService","hasAcceptedTerms","navigateAfterLogin","user","getCurrentUser","navigate","registrationFlow","error","console","navigateAfterRegistration","navigateAfterTermsAcceptance","navigateAfterTermsRejection","logout","navigateToFeed","navigateToElo","navigateToLogin","navigateToRegister","resetRegistrationFlow","isInRegistrationFlow","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\adrie\\Desktop\\src\\app\\services\\navigation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigationService {\r\n  private registrationFlow = {\r\n    hasAcceptedTerms: false\r\n  };\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  async navigateAfterLogin() {\r\n    try {\r\n      const user = await this.authService.getCurrentUser();\r\n      if (!user) {\r\n        this.router.navigate(['/login']);\r\n        return;\r\n      }\r\n\r\n      // Se o usuário acabou de se registrar e não aceitou os termos\r\n      if (!this.registrationFlow.hasAcceptedTerms) {\r\n        this.router.navigate(['/terms']);\r\n        return;\r\n      }\r\n\r\n      // Caso contrário, vai para o feed\r\n      this.router.navigate(['/feed']);\r\n    } catch (error) {\r\n      console.error('Navigation error:', error);\r\n      this.router.navigate(['/login']);\r\n    }\r\n  }\r\n\r\n  async navigateAfterRegistration() {\r\n    this.registrationFlow.hasAcceptedTerms = false;\r\n    this.router.navigate(['/terms']);\r\n  }\r\n\r\n  async navigateAfterTermsAcceptance() {\r\n    this.registrationFlow.hasAcceptedTerms = true;\r\n    this.router.navigate(['/feed']);\r\n  }\r\n\r\n  async navigateAfterTermsRejection() {\r\n    // Se rejeitar os termos, faz logout e volta para o registro\r\n    await this.authService.logout();\r\n    this.router.navigate(['/register']);\r\n  }\r\n\r\n  async navigateToFeed() {\r\n    this.router.navigate(['/feed']);\r\n  }\r\n\r\n  async navigateToElo() {\r\n    this.router.navigate(['/elo']);\r\n  }\r\n\r\n  async navigateToLogin() {\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  async navigateToRegister() {\r\n    this.router.navigate(['/register']);\r\n  }\r\n\r\n  resetRegistrationFlow() {\r\n    this.registrationFlow.hasAcceptedTerms = false;\r\n  }\r\n\r\n  isInRegistrationFlow(): boolean {\r\n    return !this.registrationFlow.hasAcceptedTerms;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}