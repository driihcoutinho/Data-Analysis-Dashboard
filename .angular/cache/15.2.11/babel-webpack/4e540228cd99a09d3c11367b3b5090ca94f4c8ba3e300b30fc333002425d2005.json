{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    return this.authService.isAuthenticated().pipe(map(isAuth => {\n      if (!isAuth) {\n        this.router.navigate(['/login']);\n        return false;\n      }\n      return true;\n    }));\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAKpC,OAAM,MAAOC,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW;IACT,OAAO,IAAI,CAACF,WAAW,CAACG,eAAe,EAAE,CAACC,IAAI,CAC5CP,GAAG,CAACQ,MAAM,IAAG;MACX,IAAI,CAACA,MAAM,EAAE;QACX,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,KAAK;;MAEd,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACH;;;uBAbWR,SAAS;IAAA;EAAA;;;aAATA,SAAS;MAAAS,SAATT,SAAS;MAAAU,YAFR;IAAM;EAAA","names":["map","AuthGuard","constructor","authService","router","canActivate","isAuthenticated","pipe","isAuth","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\adrie\\Desktop\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(): Observable<boolean> {\r\n    return this.authService.isAuthenticated().pipe(\r\n      map(isAuth => {\r\n        if (!isAuth) {\r\n          this.router.navigate(['/login']);\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}