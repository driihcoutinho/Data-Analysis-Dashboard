{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/adrie/Desktop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"./auth.service\";\nexport class FeedService {\n  constructor(firestore, authService) {\n    this.firestore = firestore;\n    this.authService = authService;\n  }\n  getPosts(limit = 10) {\n    return this.firestore.collection('posts', ref => ref.orderBy('timestamp', 'desc').limit(limit)).snapshotChanges().pipe(map(actions => actions.map(a => {\n      const data = a.payload.doc.data();\n      const id = a.payload.doc.id;\n      return {\n        ...data,\n        id\n      };\n    })));\n  }\n  getPostsAfter(lastPostId, limit = 10) {\n    return this.firestore.collection('posts', ref => {\n      const lastPost = this.firestore.doc(`posts/${lastPostId}`);\n      return ref.orderBy('timestamp', 'desc').startAfter(lastPost).limit(limit);\n    }).snapshotChanges().pipe(map(actions => actions.map(a => {\n      const data = a.payload.doc.data();\n      const id = a.payload.doc.id;\n      return {\n        ...data,\n        id\n      };\n    })));\n  }\n  createPost(content, isAnonymous = true) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const user = yield _this.authService.getCurrentUser();\n        if (!user) throw new Error('User not authenticated');\n        const post = {\n          content,\n          timestamp: new Date(),\n          likes: 0,\n          dislikes: 0,\n          userLikes: [],\n          userDislikes: [],\n          reports: 0,\n          isAnonymous,\n          userId: isAnonymous ? undefined : user.uid\n        };\n        yield _this.firestore.collection('posts').add(post);\n      } catch (error) {\n        console.error('Error creating post:', error);\n        throw error;\n      }\n    })();\n  }\n  likePost(postId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const user = yield _this2.authService.getCurrentUser();\n        if (!user) throw new Error('User not authenticated');\n        const postRef = _this2.firestore.collection('posts').doc(postId);\n        const postDoc = yield postRef.get().toPromise();\n        if (!postDoc?.exists) throw new Error('Post not found');\n        const post = postDoc.data();\n        const userLikes = post.userLikes || [];\n        const userDislikes = post.userDislikes || [];\n        if (userLikes.includes(user.uid)) {\n          // Remove like\n          yield postRef.update({\n            likes: post.likes - 1,\n            userLikes: userLikes.filter(uid => uid !== user.uid)\n          });\n        } else {\n          // Add like and remove dislike if exists\n          const updates = {\n            likes: post.likes + 1,\n            userLikes: [...userLikes, user.uid]\n          };\n          if (userDislikes.includes(user.uid)) {\n            updates.dislikes = post.dislikes - 1;\n            updates.userDislikes = userDislikes.filter(uid => uid !== user.uid);\n          }\n          yield postRef.update(updates);\n        }\n      } catch (error) {\n        console.error('Error liking post:', error);\n        throw error;\n      }\n    })();\n  }\n  dislikePost(postId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const user = yield _this3.authService.getCurrentUser();\n        if (!user) throw new Error('User not authenticated');\n        const postRef = _this3.firestore.collection('posts').doc(postId);\n        const postDoc = yield postRef.get().toPromise();\n        if (!postDoc?.exists) throw new Error('Post not found');\n        const post = postDoc.data();\n        const userLikes = post.userLikes || [];\n        const userDislikes = post.userDislikes || [];\n        if (userDislikes.includes(user.uid)) {\n          // Remove dislike\n          yield postRef.update({\n            dislikes: post.dislikes - 1,\n            userDislikes: userDislikes.filter(uid => uid !== user.uid)\n          });\n        } else {\n          // Add dislike and remove like if exists\n          const updates = {\n            dislikes: post.dislikes + 1,\n            userDislikes: [...userDislikes, user.uid]\n          };\n          if (userLikes.includes(user.uid)) {\n            updates.likes = post.likes - 1;\n            updates.userLikes = userLikes.filter(uid => uid !== user.uid);\n          }\n          yield postRef.update(updates);\n        }\n      } catch (error) {\n        console.error('Error disliking post:', error);\n        throw error;\n      }\n    })();\n  }\n  reportPost(postId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const postRef = _this4.firestore.collection('posts').doc(postId);\n        const postDoc = yield postRef.get().toPromise();\n        if (!postDoc?.exists) throw new Error('Post not found');\n        const post = postDoc.data();\n        yield postRef.update({\n          reports: (post.reports || 0) + 1\n        });\n      } catch (error) {\n        console.error('Error reporting post:', error);\n        throw error;\n      }\n    })();\n  }\n  static {\n    this.ɵfac = function FeedService_Factory(t) {\n      return new (t || FeedService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FeedService,\n      factory: FeedService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["map","FeedService","constructor","firestore","authService","getPosts","limit","collection","ref","orderBy","snapshotChanges","pipe","actions","a","data","payload","doc","id","getPostsAfter","lastPostId","lastPost","startAfter","createPost","content","isAnonymous","user","getCurrentUser","Error","post","timestamp","Date","likes","dislikes","userLikes","userDislikes","reports","userId","undefined","uid","add","error","console","likePost","postId","postRef","postDoc","get","toPromise","exists","includes","update","filter","updates","dislikePost","reportPost","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\adrie\\Desktop\\src\\app\\services\\feed.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthService } from './auth.service';\r\n\r\nexport interface Post {\r\n  id?: string;\r\n  content: string;\r\n  timestamp: Date;\r\n  likes: number;\r\n  dislikes: number;\r\n  userLikes?: string[]; // Array de UIDs dos usuários que deram like\r\n  userDislikes?: string[]; // Array de UIDs dos usuários que deram dislike\r\n  reports?: number;\r\n  isAnonymous: boolean;\r\n  userId?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FeedService {\r\n  constructor(\r\n    private firestore: AngularFirestore,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  getPosts(limit: number = 10): Observable<Post[]> {\r\n    return this.firestore\r\n      .collection<Post>('posts', ref => \r\n        ref.orderBy('timestamp', 'desc')\r\n           .limit(limit)\r\n      )\r\n      .snapshotChanges()\r\n      .pipe(\r\n        map(actions => actions.map(a => {\r\n          const data = a.payload.doc.data() as Post;\r\n          const id = a.payload.doc.id;\r\n          return { ...data, id };\r\n        }))\r\n      );\r\n  }\r\n\r\n  getPostsAfter(lastPostId: string, limit: number = 10): Observable<Post[]> {\r\n    return this.firestore\r\n      .collection<Post>('posts', ref => {\r\n        const lastPost = this.firestore.doc(`posts/${lastPostId}`);\r\n        return ref.orderBy('timestamp', 'desc')\r\n                 .startAfter(lastPost)\r\n                 .limit(limit);\r\n      })\r\n      .snapshotChanges()\r\n      .pipe(\r\n        map(actions => actions.map(a => {\r\n          const data = a.payload.doc.data() as Post;\r\n          const id = a.payload.doc.id;\r\n          return { ...data, id };\r\n        }))\r\n      );\r\n  }\r\n\r\n  async createPost(content: string, isAnonymous: boolean = true): Promise<void> {\r\n    try {\r\n      const user = await this.authService.getCurrentUser();\r\n      if (!user) throw new Error('User not authenticated');\r\n\r\n      const post: Post = {\r\n        content,\r\n        timestamp: new Date(),\r\n        likes: 0,\r\n        dislikes: 0,\r\n        userLikes: [],\r\n        userDislikes: [],\r\n        reports: 0,\r\n        isAnonymous,\r\n        userId: isAnonymous ? undefined : user.uid\r\n      };\r\n\r\n      await this.firestore.collection('posts').add(post);\r\n    } catch (error) {\r\n      console.error('Error creating post:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async likePost(postId: string): Promise<void> {\r\n    try {\r\n      const user = await this.authService.getCurrentUser();\r\n      if (!user) throw new Error('User not authenticated');\r\n\r\n      const postRef = this.firestore.collection('posts').doc(postId);\r\n      const postDoc = await postRef.get().toPromise();\r\n      \r\n      if (!postDoc?.exists) throw new Error('Post not found');\r\n      \r\n      const post = postDoc.data() as Post;\r\n      const userLikes = post.userLikes || [];\r\n      const userDislikes = post.userDislikes || [];\r\n\r\n      if (userLikes.includes(user.uid)) {\r\n        // Remove like\r\n        await postRef.update({\r\n          likes: post.likes - 1,\r\n          userLikes: userLikes.filter(uid => uid !== user.uid)\r\n        });\r\n      } else {\r\n        // Add like and remove dislike if exists\r\n        const updates: Partial<Post> = {\r\n          likes: post.likes + 1,\r\n          userLikes: [...userLikes, user.uid]\r\n        };\r\n\r\n        if (userDislikes.includes(user.uid)) {\r\n          updates.dislikes = post.dislikes - 1;\r\n          updates.userDislikes = userDislikes.filter(uid => uid !== user.uid);\r\n        }\r\n\r\n        await postRef.update(updates);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error liking post:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async dislikePost(postId: string): Promise<void> {\r\n    try {\r\n      const user = await this.authService.getCurrentUser();\r\n      if (!user) throw new Error('User not authenticated');\r\n\r\n      const postRef = this.firestore.collection('posts').doc(postId);\r\n      const postDoc = await postRef.get().toPromise();\r\n      \r\n      if (!postDoc?.exists) throw new Error('Post not found');\r\n      \r\n      const post = postDoc.data() as Post;\r\n      const userLikes = post.userLikes || [];\r\n      const userDislikes = post.userDislikes || [];\r\n\r\n      if (userDislikes.includes(user.uid)) {\r\n        // Remove dislike\r\n        await postRef.update({\r\n          dislikes: post.dislikes - 1,\r\n          userDislikes: userDislikes.filter(uid => uid !== user.uid)\r\n        });\r\n      } else {\r\n        // Add dislike and remove like if exists\r\n        const updates: Partial<Post> = {\r\n          dislikes: post.dislikes + 1,\r\n          userDislikes: [...userDislikes, user.uid]\r\n        };\r\n\r\n        if (userLikes.includes(user.uid)) {\r\n          updates.likes = post.likes - 1;\r\n          updates.userLikes = userLikes.filter(uid => uid !== user.uid);\r\n        }\r\n\r\n        await postRef.update(updates);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error disliking post:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async reportPost(postId: string): Promise<void> {\r\n    try {\r\n      const postRef = this.firestore.collection('posts').doc(postId);\r\n      const postDoc = await postRef.get().toPromise();\r\n      \r\n      if (!postDoc?.exists) throw new Error('Post not found');\r\n      \r\n      const post = postDoc.data() as Post;\r\n      await postRef.update({\r\n        reports: (post.reports || 0) + 1\r\n      });\r\n    } catch (error) {\r\n      console.error('Error reporting post:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}