{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/adrie/Desktop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(afAuth, firestore, router) {\n    var _this = this;\n    this.afAuth = afAuth;\n    this.firestore = firestore;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n    this.user$ = this.user.asObservable();\n    // Observar mudanças no estado de autenticação\n    this.afAuth.authState.subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (firebaseUser) {\n        if (firebaseUser) {\n          const userDoc = yield _this.firestore.collection('users').doc(firebaseUser.uid).get().toPromise();\n          if (userDoc?.exists) {\n            const userData = userDoc.data();\n            _this.user.next({\n              uid: firebaseUser.uid,\n              ...userData\n            });\n          }\n        } else {\n          _this.user.next(null);\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  register(email, password, userData) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const credential = yield _this2.afAuth.createUserWithEmailAndPassword(email, password);\n        if (credential.user) {\n          // Criar documento do usuário no Firestore\n          yield _this2.firestore.collection('users').doc(credential.user.uid).set({\n            email,\n            status: 'online',\n            ...userData\n          });\n          // Navegar para a página de termos\n          _this2.router.navigate(['/terms']);\n        }\n      } catch (error) {\n        console.error('Registration error:', error);\n        throw error;\n      }\n    })();\n  }\n  login(email, password) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this3.afAuth.signInWithEmailAndPassword(email, password);\n        // Atualizar status para online\n        const user = yield _this3.getCurrentUser();\n        if (user) {\n          yield _this3.firestore.collection('users').doc(user.uid).update({\n            status: 'online'\n          });\n        }\n        _this3.router.navigate(['/feed']);\n      } catch (error) {\n        console.error('Login error:', error);\n        throw error;\n      }\n    })();\n  }\n  logout() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const user = yield _this4.getCurrentUser();\n        if (user) {\n          // Atualizar status para offline antes de fazer logout\n          yield _this4.firestore.collection('users').doc(user.uid).update({\n            status: 'offline'\n          });\n        }\n        yield _this4.afAuth.signOut();\n        _this4.router.navigate(['/login']);\n      } catch (error) {\n        console.error('Logout error:', error);\n        throw error;\n      }\n    })();\n  }\n  getCurrentUser() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const firebaseUser = yield _this5.afAuth.currentUser;\n      if (!firebaseUser) return null;\n      const userDoc = yield _this5.firestore.collection('users').doc(firebaseUser.uid).get().toPromise();\n      if (userDoc?.exists) {\n        const userData = userDoc.data();\n        return {\n          uid: firebaseUser.uid,\n          ...userData\n        };\n      }\n      return null;\n    })();\n  }\n  isAuthenticated() {\n    return this.afAuth.authState.pipe(map(user => !!user));\n  }\n  updateUserProfile(uid, data) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this6.firestore.collection('users').doc(uid).update(data);\n      } catch (error) {\n        console.error('Update profile error:', error);\n        throw error;\n      }\n    })();\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","AuthService","constructor","afAuth","firestore","router","user","asObservable","authState","subscribe","firebaseUser","userDoc","collection","doc","uid","get","toPromise","exists","userData","data","next","register","email","password","credential","createUserWithEmailAndPassword","set","status","navigate","error","console","login","signInWithEmailAndPassword","getCurrentUser","update","logout","signOut","currentUser","isAuthenticated","pipe","updateUserProfile","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\adrie\\Desktop\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string;\r\n  username?: string;\r\n  birthdate?: string;\r\n  gender?: 'fem' | 'desfem' | 'trans';\r\n  sexualOrientation?: 'lesbian' | 'bisexual' | 'pansexual';\r\n  profilePicture?: string;\r\n  status: 'online' | 'offline';\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private user = new BehaviorSubject<User | null>(null);\r\n  user$ = this.user.asObservable();\r\n\r\n  constructor(\r\n    private afAuth: AngularFireAuth,\r\n    private firestore: AngularFirestore,\r\n    private router: Router\r\n  ) {\r\n    // Observar mudanças no estado de autenticação\r\n    this.afAuth.authState.subscribe(async (firebaseUser) => {\r\n      if (firebaseUser) {\r\n        const userDoc = await this.firestore\r\n          .collection('users')\r\n          .doc(firebaseUser.uid)\r\n          .get()\r\n          .toPromise();\r\n\r\n        if (userDoc?.exists) {\r\n          const userData = userDoc.data() as Omit<User, 'uid'>;\r\n          this.user.next({\r\n            uid: firebaseUser.uid,\r\n            ...userData\r\n          });\r\n        }\r\n      } else {\r\n        this.user.next(null);\r\n      }\r\n    });\r\n  }\r\n\r\n  async register(email: string, password: string, userData: Partial<User>): Promise<void> {\r\n    try {\r\n      const credential = await this.afAuth.createUserWithEmailAndPassword(email, password);\r\n      if (credential.user) {\r\n        // Criar documento do usuário no Firestore\r\n        await this.firestore.collection('users').doc(credential.user.uid).set({\r\n          email,\r\n          status: 'online',\r\n          ...userData\r\n        });\r\n        \r\n        // Navegar para a página de termos\r\n        this.router.navigate(['/terms']);\r\n      }\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async login(email: string, password: string): Promise<void> {\r\n    try {\r\n      await this.afAuth.signInWithEmailAndPassword(email, password);\r\n      // Atualizar status para online\r\n      const user = await this.getCurrentUser();\r\n      if (user) {\r\n        await this.firestore.collection('users').doc(user.uid).update({\r\n          status: 'online'\r\n        });\r\n      }\r\n      this.router.navigate(['/feed']);\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    try {\r\n      const user = await this.getCurrentUser();\r\n      if (user) {\r\n        // Atualizar status para offline antes de fazer logout\r\n        await this.firestore.collection('users').doc(user.uid).update({\r\n          status: 'offline'\r\n        });\r\n      }\r\n      await this.afAuth.signOut();\r\n      this.router.navigate(['/login']);\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getCurrentUser(): Promise<User | null> {\r\n    const firebaseUser = await this.afAuth.currentUser;\r\n    if (!firebaseUser) return null;\r\n\r\n    const userDoc = await this.firestore\r\n      .collection('users')\r\n      .doc(firebaseUser.uid)\r\n      .get()\r\n      .toPromise();\r\n\r\n    if (userDoc?.exists) {\r\n      const userData = userDoc.data() as Omit<User, 'uid'>;\r\n      return {\r\n        uid: firebaseUser.uid,\r\n        ...userData\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  isAuthenticated(): Observable<boolean> {\r\n    return this.afAuth.authState.pipe(\r\n      map(user => !!user)\r\n    );\r\n  }\r\n\r\n  async updateUserProfile(uid: string, data: Partial<User>): Promise<void> {\r\n    try {\r\n      await this.firestore.collection('users').doc(uid).update(data);\r\n    } catch (error) {\r\n      console.error('Update profile error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}