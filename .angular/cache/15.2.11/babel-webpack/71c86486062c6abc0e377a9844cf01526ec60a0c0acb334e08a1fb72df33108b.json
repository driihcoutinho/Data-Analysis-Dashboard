{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/adrie/Desktop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nexport class UiService {\n  constructor(loadingController, toastController, alertController) {\n    this.loadingController = loadingController;\n    this.toastController = toastController;\n    this.alertController = alertController;\n  }\n  showLoading(message = 'Please wait...') {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.loading = yield _this.loadingController.create({\n        message,\n        spinner: 'crescent',\n        cssClass: 'custom-loading'\n      });\n      yield _this.loading.present();\n    })();\n  }\n  hideLoading() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.loading) {\n        yield _this2.loading.dismiss();\n        _this2.loading = undefined;\n      }\n    })();\n  }\n  showToast(message, color = 'success', duration = 2000) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const toast = yield _this3.toastController.create({\n        message,\n        duration,\n        color,\n        position: 'top',\n        cssClass: 'custom-toast',\n        buttons: [{\n          icon: 'close',\n          role: 'cancel'\n        }]\n      });\n      yield toast.present();\n    })();\n  }\n  showAlert(header, message, buttons = ['OK']) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const alert = yield _this4.alertController.create({\n        header,\n        message,\n        buttons,\n        cssClass: 'custom-alert'\n      });\n      yield alert.present();\n    })();\n  }\n  showConfirm(header, message) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve) {\n          const alert = yield _this5.alertController.create({\n            header,\n            message,\n            buttons: [{\n              text: 'Cancel',\n              role: 'cancel',\n              cssClass: 'secondary',\n              handler: () => resolve(false)\n            }, {\n              text: 'Confirm',\n              handler: () => resolve(true)\n            }],\n            cssClass: 'custom-alert'\n          });\n          yield alert.present();\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  showError(error) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      let message = 'An unexpected error occurred';\n      if (typeof error === 'string') {\n        message = error;\n      } else if (error.message) {\n        message = error.message;\n      }\n      yield _this6.showToast(message, 'danger', 3000);\n    })();\n  }\n  showSuccess(message) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      yield _this7.showToast(message, 'success');\n    })();\n  }\n  showWarning(message) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      yield _this8.showToast(message, 'warning');\n    })();\n  }\n  static {\n    this.ɵfac = function UiService_Factory(t) {\n      return new (t || UiService)(i0.ɵɵinject(i1.LoadingController), i0.ɵɵinject(i1.ToastController), i0.ɵɵinject(i1.AlertController));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UiService,\n      factory: UiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["UiService","constructor","loadingController","toastController","alertController","showLoading","message","loading","create","spinner","cssClass","present","hideLoading","dismiss","undefined","showToast","color","duration","toast","position","buttons","icon","role","showAlert","header","alert","showConfirm","Promise","resolve","text","handler","showError","error","showSuccess","showWarning","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\adrie\\Desktop\\src\\app\\services\\ui.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { LoadingController, ToastController, AlertController } from '@ionic/angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UiService {\r\n  private loading?: HTMLIonLoadingElement;\r\n\r\n  constructor(\r\n    private loadingController: LoadingController,\r\n    private toastController: ToastController,\r\n    private alertController: AlertController\r\n  ) {}\r\n\r\n  async showLoading(message: string = 'Please wait...') {\r\n    this.loading = await this.loadingController.create({\r\n      message,\r\n      spinner: 'crescent',\r\n      cssClass: 'custom-loading'\r\n    });\r\n    await this.loading.present();\r\n  }\r\n\r\n  async hideLoading() {\r\n    if (this.loading) {\r\n      await this.loading.dismiss();\r\n      this.loading = undefined;\r\n    }\r\n  }\r\n\r\n  async showToast(message: string, color: 'success' | 'danger' | 'warning' = 'success', duration: number = 2000) {\r\n    const toast = await this.toastController.create({\r\n      message,\r\n      duration,\r\n      color,\r\n      position: 'top',\r\n      cssClass: 'custom-toast',\r\n      buttons: [\r\n        {\r\n          icon: 'close',\r\n          role: 'cancel'\r\n        }\r\n      ]\r\n    });\r\n    await toast.present();\r\n  }\r\n\r\n  async showAlert(header: string, message: string, buttons: any[] = ['OK']) {\r\n    const alert = await this.alertController.create({\r\n      header,\r\n      message,\r\n      buttons,\r\n      cssClass: 'custom-alert'\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  async showConfirm(header: string, message: string): Promise<boolean> {\r\n    return new Promise(async (resolve) => {\r\n      const alert = await this.alertController.create({\r\n        header,\r\n        message,\r\n        buttons: [\r\n          {\r\n            text: 'Cancel',\r\n            role: 'cancel',\r\n            cssClass: 'secondary',\r\n            handler: () => resolve(false)\r\n          },\r\n          {\r\n            text: 'Confirm',\r\n            handler: () => resolve(true)\r\n          }\r\n        ],\r\n        cssClass: 'custom-alert'\r\n      });\r\n      await alert.present();\r\n    });\r\n  }\r\n\r\n  async showError(error: any) {\r\n    let message = 'An unexpected error occurred';\r\n    \r\n    if (typeof error === 'string') {\r\n      message = error;\r\n    } else if (error.message) {\r\n      message = error.message;\r\n    }\r\n\r\n    await this.showToast(message, 'danger', 3000);\r\n  }\r\n\r\n  async showSuccess(message: string) {\r\n    await this.showToast(message, 'success');\r\n  }\r\n\r\n  async showWarning(message: string) {\r\n    await this.showToast(message, 'warning');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}